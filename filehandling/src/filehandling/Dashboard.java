/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filehandling;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 2ndyrGroupA
 */
public class Dashboard extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    JFrame frame = new JFrame();
    DefaultTableModel tm = new DefaultTableModel();
    String emailAccount;
    String passwordAccount;
    String data = "";
    List<List> users = new ArrayList<List>();
    String line = null;
    boolean logoutUser = false;

    public Dashboard() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    public Dashboard(String email, String password) {
        initComponents();
        this.emailAccount = email;
        this.passwordAccount = password;
        this.setLocationRelativeTo(null);
        System.out.println(emailAccount + " " + password);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        logout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userListTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));
        jPanel2.setAlignmentX(1.0F);
        jPanel2.setAlignmentY(1.0F);
        jPanel2.setAutoscrolls(true);
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 30));

        jLabel1.setBackground(new java.awt.Color(0, 102, 102));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Dashboard");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        logout.setText("Logout");
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });

        userListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Email/Username", "Password"
            }
        ));
        userListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userListTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userListTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(logout)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        new Login().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_logoutActionPerformed

    private void userListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userListTableMouseClicked
        // TODO add your handling code here:
        int row = userListTable.getSelectedRow();
        int column = userListTable.getSelectedColumn();
        String username = userListTable.getValueAt(row, 2).toString();
        System.out.println(emailAccount);
        if (!emailAccount.equals(username)) {
            for (int i = 0; i <= column; i++) {
                data += userListTable.getValueAt(row, i) + "\n";
            }
            JOptionPane.showMessageDialog(null, data);
            data = "";
        }

        if (!userListTable.getSelectionModel().isSelectionEmpty()) {

            JButton editbtn = new JButton("EDIT");
            editbtn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (username.equals(emailAccount)) {
                        for (int i = 0; i <= column; i++) {
                            data += userListTable.getValueAt(row, i) + "\n";
                        }
                        editData();
                        frame.setVisible(false);
                    }
                    data = "";
                }
            });
            JButton deletebtn = new JButton("DELETE");
            deletebtn.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    if (username.equals(emailAccount)) {
                        for (int i = 0; i <= column; i++) {
                            data += userListTable.getValueAt(row, i) + "\n";
                        }
                        delete();
                        frame.setVisible(false);
                    }
                    data = "";
                }
            });

            frame.add(editbtn, BorderLayout.WEST);
            frame.add(deletebtn, BorderLayout.EAST);
            frame.pack();
            frame.setLocationRelativeTo(null);
            if (username.equals(emailAccount)) {
                frame.setVisible(true);
            }
        }
    }//GEN-LAST:event_userListTableMouseClicked

    public void editData() {
        int row = userListTable.getSelectedRow();
        JTextField fname = new JTextField(20);
        fname.setText(userListTable.getValueAt(row, 0).toString());
        JTextField lname = new JTextField(20);
        lname.setText(userListTable.getValueAt(row, 1).toString());
        JTextField uname = new JTextField(20);
        uname.setText(userListTable.getValueAt(row, 2).toString());
        JPasswordField pass = new JPasswordField(20);
        JPasswordField confirmpass = new JPasswordField(20);
        Object[] message = {
            "Edit Values",
            "First name:", fname,
            "Last name:", lname,
            "Email/Username:", uname,
            "Password:", pass,
            "Confirm Password:", confirmpass};
        int option = JOptionPane.showConfirmDialog(rootPane, message, "Enter all your values",
                JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION && fname.getText().length() >= 3 && lname.getText().length() >= 2 && uname.getText().length() >= 5 && pass.getText().equals(confirmpass.getText())) {
            try {
                File f1 = new Register().getFile();
                FileReader fr = new FileReader(f1);
                BufferedReader br = new BufferedReader(fr);
                while ((line = br.readLine()) != null) {
                    String[] lines = line.split(" ");
                    List<String> data = new ArrayList();
                    String[] removedNull = Arrays.stream(lines)
                            .filter(value -> value != null && value.length() > 0)
                            .toArray(size -> new String[size]);

//                    System.out.println(Arrays.toString(removedNull));
                    if (removedNull[2].equals(emailAccount)) {
                        System.out.println(Arrays.toString(removedNull));
                        removedNull[0] = removedNull[0].replace(removedNull[0], fname.getText());
                        removedNull[1] = removedNull[1].replace(removedNull[1], lname.getText());
                        removedNull[2] = removedNull[2].replace(removedNull[2], uname.getText());
                        removedNull[3] = removedNull[3].replace(removedNull[3], pass.getText());
                        for (String a : removedNull) {
                            data.add(a);
                        }
                        users.add(data);
                    } else {
                        for (String s : removedNull) {
                            data.add(s);
                        }
                        users.add(data);
                    }
                    System.out.println(data);
                }
                System.out.println(users);
                fr.close();
                br.close();

                FileWriter fw = new FileWriter(f1);
                BufferedWriter out = new BufferedWriter(fw);
                for (List s : users) {
                    if (pass.getText().length() > 0) {
                        out.write(String.format(String.format("%-15s %-15s %-30s %-15s\n",
                                s.get(0), s.get(1), s.get(2), s.get(3))));
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Password is too short");
                    }
                }
                out.flush();
                out.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            setUser(uname.getText());
            tm.setRowCount(0);
            retrieveData();
            if (!pass.getText().equals(confirmpass.getText())) {
                JOptionPane.showMessageDialog(null, "Password doesn't match.");
            } else if (fname.getText().length() < 3 && lname.getText().length() < 2 && uname.getText().length() < 5) {
                JOptionPane.showMessageDialog(null, "Your inputs are invalid please make sure all inputs are valid!");
            }
        }

    }

    public void delete() {
        try {
            File f1 = new Register().getFile();
            FileReader fr = new FileReader(f1);
            BufferedReader br = new BufferedReader(fr);
            while ((line = br.readLine()) != null) {
                String[] lines = line.split(" ");
                List<String> data = new ArrayList();
                String[] removedNull = Arrays.stream(lines)
                        .filter(value -> value != null && value.length() > 0)
                        .toArray(size -> new String[size]);

//                    System.out.println(Arrays.toString(removedNull));
                if (removedNull[2].equals(emailAccount)) {
                    continue;
                } else {
                    for (String s : removedNull) {
                        data.add(s);
                    }
                    if(!users.contains(data)) {
                        users.add(data);
                    }
                }
                System.out.println(data);
            }
            System.out.println(users);
            fr.close();
            br.close();

            FileWriter fw = new FileWriter(f1);
            BufferedWriter out = new BufferedWriter(fw);
            for (List s : users) {
                out.write(String.format(String.format("%-15s %-15s %-30s %-15s\n",
                        s.get(0), s.get(1), s.get(2), s.get(3))));

            }
            out.flush();
            out.close();
            
            
            new Thread(new Runnable() {
                @Override
                public void run() {
                    for(int i = 0;; i++) {
                        if(i == 10) {
                            break;
                        }
                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    logoutUser = true;
                }
                
            }).start();
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        tm.setRowCount(0);
        retrieveData();
    }

    public void retrieveData() {
        tm = (DefaultTableModel) userListTable.getModel();

        Login l = new Login();
        l.read();
        List<List> data = l.users;

        for (List user : data) {
            tm.addRow(new Object[]{user.get(0), user.get(1), user.get(2), user.get(3)});
        }
    }

    public void setUser(String user) {
        this.emailAccount = user;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logout;
    private javax.swing.JTable userListTable;
    // End of variables declaration//GEN-END:variables
}
